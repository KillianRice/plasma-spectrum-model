function [B,Bmag,theta,phi] = getQuadrupoleField(r,dBdx)
% r (1x3 double): [x y z] position relative to field null (units: mm)
% dBdx (double): linear magnetic field gradient along symmetry (x) axis of anti-Helmholtz coils (units: Tesla/mm)
% B (1x3 double): [Bx By Bz] magnetic field components in Tesla
% Bmag (double): magnetic field amplitude in Tesla
% theta (double): angle (radians) subtended from projection of local field direction onto xy-plane and y axis
% phi (double): angle (radians) subtended from local field vector and xy-plane

% This function returns the quadrupole magnetic field at a position 'r' relative to the field null. The magnetic fields are
% generated by anti-Helmholtz coils with linear field gradient 'dBdx' relative to symmetry (x) axis. The default field
% gradient is chosen to be consistent with typical experimental conditions (15 G/mm). The angles 'theta' and 'phi' will be
% nan if the dependent field components are zero. For example, B = [0 0 0] will result in both angles being nan and B = [0 0
% z] will result in 'theta' being nan. The function of returning nan in these cases is to notify other functions that the
% field profile doesn't quantize the ions.

%% Default Function Arguments
if nargin < 1
    error('Not enough function arguments. User must specify position r = [x y z], units: mm.')
elseif nargin == 1
    if ~isnumeric(r) || length(r) ~= 3
        error('Position specified incorrectly. r = [x y z], units: mm.')
    end
    
    dBdx = 15e-4; % linear magnetic field gradient (units: T/mm) typically used in our experiments
end

%% Return Quadrupole Magnetic Field

B = dBdx*[-r(1), r(2)/2, r(3)/2]; % magnetic field vector in Tesla
Bmag = sqrt(sum(B.^2)); % magnetic field amplitude in Tesla
theta = atan(2*r(1)/r(2));
Bxy = sqrt(B(1)^2+B(2)^2);
phi = atan(B(3)/Bxy);

if r(2) < 0
    theta = theta + pi;
end

end